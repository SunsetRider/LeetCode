/**
 * Problem:
 * You are given a string, S, and a list of words, L, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.
 * 
 * For example, given:
 * S: "barfoothefoobarman"
 * L: ["foo", "bar"]
 * 
 * You should return the indices: [0,9].
 * (order does not matter).
 */

/**
 * Aglorithm 1:
 * 1.Use HashMap to store the frequencies of every word in L
 * 2.Check every concatenation of S, find out if it is made by concatenating the words with coresponding frequencies.
 */
public class Solution {
    public ArrayList<Integer> findSubstring(String S, String[] L) {
        int wordLength = L[0].length();

        ArrayList<Integer> result = new ArrayList<Integer>();

        // store the words and frequencies in a hash table
        HashMap<String, Integer> words = new HashMap<String, Integer>();
        for (String s : L) {
            if (words.containsKey(s)) {
                words.put(s, words.get(s)+1);
            } else {
                words.put(s, 1);
            }
        }

        // find concatenations                                     
        for (int i=0; i <= S.length() - L.length*wordLength; ++i) {
            // check if it is a concatenation
            HashMap<String, Integer> target = new HashMap<String, Integer>(words);
            for (int j = i; j <= S.length() - wordLength && !target.isEmpty(); j+=wordLength) {
                String sub = S.substring(j, j+wordLength);
                if (!target.containsKey(sub)) break;
                if (target.get(sub) > 1) {  // reduce the frequency
                    target.put(sub, target.get(sub)-1);
                } else {  // remove the word if only one left
                    target.remove(sub);
                }
            }
            if (target.isEmpty()) {
                result.add(i);
            }
        }

        return result;
    }
}
