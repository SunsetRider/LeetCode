/**
 * Problem:
 * You are given two linked lists representing two non-negative numbers. 
 * The digits are stored in reverse order and each of their nodes contain a single digit. 
 * Add the two numbers and return it as a linked list.
 *
 * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
 * Output: 7 -> 0 -> 8
 *
 * Definition for singly-linked list:
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

/**
 * Algorithm 1:
 * It's very straightforward. 
 * Just sum each pair of the digits with the carry.
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Note: The Solution object is instantiated only once and is reused by each test case.

        ListNode sum = new ListNode(0);
        ListNode psum = new ListNode(-1);
        ListNode pl1 = l1;
        ListNode pl2 = l2;

        int carry = 0;
        int subSum;
        while(pl1 != null || pl2 != null) {
        	// calculate the sum of the digit pair
        	if (pl1 == null)
        		subSum = pl2.val + carry;
        	else if (pl2 == null)
        		subSum = pl1.val + carry;
        	else
        		subSum = pl1.val + pl2.val + carry;

        	// set the carry and subsum
        	if (subSum >= 10) {
        		carry = 1;
        		subSum -= 10;
        	} else {
        		carry = 0;
        	}

        	// add the node
        	if (psum.val == -1) {
        		psum = new ListNode(subSum);
        		sum = psum; // set the head 
        	} else {
        		psum.next = new ListNode(subSum);
        		psum = psum.next;
        	}

        	if (pl1 != null)
        		pl1 = pl1.next;
        	if (pl2 != null)
        		pl2 = pl2.next;
        }

        if (carry == 1)
        	psum.next = new ListNode(1);

        return sum;

    }
}
